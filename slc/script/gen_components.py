#!/usr/bin/env python3

import os
import sys
import yaml
import json
import pathlib

PIGWEED_ALLOW_LIST = ['check_backend', 'intrusive_list']

if __name__ == '__main__':
    root = pathlib.Path(sys.argv[1]).parent.absolute()
    with open(sys.argv[1]) as f:
        compile_commands = json.load(f)

    libs = {}

    for cmd in compile_commands:
        dir = pathlib.Path(cmd['directory'])
        file = (dir / cmd['file']).resolve()
        command = cmd['command']

        obj_path = pathlib.Path(command.split(' ')[-1])
        lib = obj_path.stem.split('.')[0]
        if 'pigweed' in obj_path.parts and not lib.startswith('pw_') and lib not in PIGWEED_ALLOW_LIST:
            # internal pigweed stuff that we don't care about -- skip creating library
            continue

        if lib not in libs:
            libs[lib] = {
                'src': set(),
                'inc': set(),
                'options': set(),
                'defines': set(),
            }
        libs[lib]['src'].add(str(file.relative_to(pathlib.Path.cwd())))

        inc = map(
            lambda x: str((dir / x.removeprefix('-I').removeprefix('-isystem')).resolve().relative_to(pathlib.Path.cwd())),
            filter(
                lambda x: x.startswith('-I'),# or x.startswith('-isystem'),
                command.split(' ')
            )
        )

        libs[lib]['inc'] |= set(inc)

        opt = filter(
            lambda x: x.startswith('-f') or x.startswith('-W'),
            command.split(' ')
        )
        libs[lib]['options'] |= set(opt)

        defines = map(
            lambda x: x.removeprefix('"-D').removesuffix('"') if x.startswith('"') else x.removeprefix('-D'),
            filter(
                lambda x: x.startswith(('-D', '"-D')),
                command.split(' ')
            )
        )


        libs[lib]['defines'] |= set(defines)

    os.makedirs('slc/component/autogen', exist_ok=True)
    for name, data in libs.items():
        name = name.lower().replace('-', '_')
        with open(f"slc/component/autogen/{name}.slcc", 'w') as f:
            component = {}
            component['id'] = name
            component['description'] = name
            component['quality'] = 'production'
            component['package'] = 'Matter'
            component['category'] = 'Matter|Core'
            component['provides'] = [{'name': f'matter_{name}'}]
            component['source'] = []
            for src in sorted(data['src']):
                if any(path in src for path in ['zzz_generated/lock-app', 'freertos_bluetooth.c']):
                    # Skip sources related to sample apps
                    continue

                if src.endswith('gatt_db.c'):
                    # GATT database should be generated by btconf tool
                    component['config_file'] = [{'path': src.replace('gatt_db.c', 'gatt.btconf'), 'directory': 'btconf'}]
                    component['provides'].append({'name': 'gatt_configuration'})
                    component['template_contribution'] = [{'name': 'component_catalog', 'value': 'gatt_configuration'}]
                else:
                    component['source'].append({'path': src})
            component['include'] = []
            for inc in sorted(data['inc']):
                if any(path in inc for path in ['openthread', 'out/lock-app/BRD4161A/gen/include', 'RTT', 'zzz_generated/lock-app', 'examples/lock-app/efr32/include']):
                    # Skip includes related to Gecko SDK and sample apps
                    continue

                component['include'].append({'path': inc})
            component['define'] = []
            for define in sorted(data['defines']):
                value = None
                if '=' in define:
                    define, value = define.split('=')
                
                if define.startswith(('__', 'SL_', 'NVM3_', 'MBEDTLS_', 'EFR32', 'CORTEXM3', 'CONFIG', 'BOARD', 'BRD', 'PLATFORM', 'KVS')) or define in ['USE_NVM3', 'MICRO', 'PLAT', 'PHY']:
                    # Skip defines related to Gecko SDK
                    continue

                if value is not None:
                    component['define'].append({'name': define, 'value': value})
                else:
                    component['define'].append({'name': define})
            yaml.dump(component, f, Dumper=yaml.SafeDumper, default_flow_style=False, indent=4) 
